name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  backend:
    name: Backend CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Configuration de Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Installation des dépendances du backend
        working-directory: ./backend
        run: npm install

      - name: Build du backend
        working-directory: ./backend
        run: npm run build

  frontend:
    name: Frontend CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Configuration de Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Installation des dépendances du frontend
        working-directory: ./frontend
        run: npm install

      - name: Build du frontend
        working-directory: ./frontend
        run: npm run build

  docker-backend:
    name: Build Docker Image - Backend
    runs-on: ubuntu-latest
    needs: backend
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Build Docker image - backend
        run: docker build -t backend-image:latest ./backend

  docker-frontend:
    name: Build Docker Image - Frontend
    runs-on: ubuntu-latest
    needs: frontend
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Build Docker image - frontend
        run: docker build -t frontend-image:latest ./frontend

  docker-compose-test:
    name: Test de l'intégration Docker Compose
    runs-on: ubuntu-latest
    needs: [docker-backend, docker-frontend]
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Set up Docker and Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ca-certificates \
            curl \
            gnupg \
            lsb-release

          sudo mkdir -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

          sudo usermod -aG docker $USER
          newgrp docker

      - name: Créer le fichier .env dans backend
        run: |
          echo "DB_HOST=postgres-db" > ./backend/.env
          echo "DB_PORT=5432" >> ./backend/.env
          echo "DB_USER=${{ secrets.DB_USER }}" >> ./backend/.env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> ./backend/.env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> ./backend/.env

      - name: Lancer docker-compose
        run: docker compose --env-file ./backend/.env up -d --build

      - name: Vérifier les conteneurs actifs
        run: docker ps

      - name: Nettoyage
        if: always()
        run: docker compose --env-file ./backend/.env down --volumes

      - name: Supprimer le fichier .env
        if: always()
        run: rm -f ./backend/.env