name: CI Pipeline

permissions:
  contents: write

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

jobs:
  backend:
    name: Backend CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Configuration de Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Installation des dépendances du backend
        working-directory: ./backend
        run: npm install

      - name: Build du backend
        working-directory: ./backend
        run: npm run build

      - name: Test du backend
        working-directory: ./backend
        run: npm test

  frontend:
    name: Frontend CI & Selenium Tests
    env:
      FRONTEND_URL: http://localhost:5173
    runs-on: ubuntu-latest
    services:
      xvfb:
        image: selenium/standalone-chrome:latest

    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Configuration de Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Installation des dépendances du frontend
        working-directory: ./frontend
        run: npm install

      - name: Build du frontend
        working-directory: ./frontend
        run: npm run build

      - name: Installer Google Chrome v134
        run: |
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo apt-get install -y ./google-chrome-stable_current_amd64.deb
          google-chrome --version
      
      - name: Installer ChromeDriver v134
        run: |
          wget -O chromedriver.zip https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/134.0.6998.165/linux64/chromedriver-linux64.zip
          unzip chromedriver.zip
          sudo mv chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
          sudo chmod +x /usr/local/bin/chromedriver
          chromedriver --version
  
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'
  
      - name: Install dependencies
        run: pip install pytest selenium
      
      - name: Lancer le serveur frontend
        working-directory: ./frontend
        run: npm run preview &  
      
      - name: Attendre que le serveur soit prêt
        run: |
          echo "⏳ Attente du démarrage du serveur frontend sur $FRONTEND_PORT..."
          for i in {1..60}; do
            status=$(curl -s -o /dev/null -w "%{http_code}" $FRONTEND_PORT)
            if [ "$status" -eq 200 ]; then
              echo "✅ Serveur prêt (HTTP 200)"
              exit 0
            fi
            sleep 1
          done
          echo "❌ Le serveur frontend n'a pas démarré dans le délai imparti"
          exit 1
      
      - name: Exécuter les tests Selenium
        run: pytest selenium/home_test.py


  docker-backend:
    name: Build Docker Image - Backend
    runs-on: ubuntu-latest
    needs: backend
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Build Docker image - backend
        run: docker build -t backend-image:latest ./backend

  docker-frontend:
    name: Build Docker Image - Frontend
    runs-on: ubuntu-latest
    needs: frontend
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Build Docker image - frontend
        run: docker build -t frontend-image:latest ./frontend

  create-release-tag:
    if: ${{ github.event_name == 'pull_request' && github.base_ref == 'main' }}
    name: Create GitHub Release & Tag
    runs-on: ubuntu-latest
    needs: [docker-backend, docker-frontend]
    outputs:
      release_tag: ${{ steps.get_version.outputs.tag }}
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Générer un tag basé sur la date et le commit
        id: get_version
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          DATE=$(date +'%Y-%m-%d')
          TAG="v${DATE}-${SHORT_SHA}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Créer un tag Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ steps.get_version.outputs.tag }}
          git push origin ${{ steps.get_version.outputs.tag }}

      - name: Créer une release GitHub
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.tag }}

  build-and-push-images:
    if: ${{ github.event_name == 'pull_request' && github.base_ref == 'main' }}
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [docker-backend, docker-frontend, create-release-tag]
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            maelmichaud/node-backend:latest
            maelmichaud/node-backend:${{ needs.create-release-tag.outputs.release_tag }}

      - name: Build & Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            maelmichaud/react-frontend:latest
            maelmichaud/react-frontend:${{ needs.create-release-tag.outputs.release_tag }}

  docker-compose-test:
    if: ${{ github.event_name == 'pull_request' && github.base_ref == 'main' }}
    name: Test de l'intégration Docker Compose
    runs-on: ubuntu-latest
    needs: [build-and-push-images, create-release-tag]
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Set up Docker and Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ca-certificates \
            curl \
            gnupg \
            lsb-release

          sudo mkdir -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

          sudo usermod -aG docker $USER
          newgrp docker

      - name: Créer le fichier .env dans backend
        run: |
          echo "DB_HOST=postgres-db" > ./backend/.env
          echo "DB_PORT=5432" >> ./backend/.env
          echo "DB_USER=${{ secrets.DB_USER }}" >> ./backend/.env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> ./backend/.env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> ./backend/.env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> ./backend/.env
          echo "JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}" >> ./backend/.env
          echo "JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}" >> ./backend/.env

      - name: Lancer docker-compose
        run: docker compose --env-file ./backend/.env up -d --build

      - name: Vérifier les conteneurs actifs
        run: docker ps

      - name: Nettoyage
        if: always()
        run: docker compose --env-file ./backend/.env down --volumes

      - name: Supprimer le fichier .env
        if: always()
        run: rm -f ./backend/.env
